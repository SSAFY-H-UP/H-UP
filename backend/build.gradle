plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.a702'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	// SPRING
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// DATA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// SECURITY
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly    'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// KAFKA
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-streams'

	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'

	//RESTDOCS
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// ETC
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	dependsOn test
	inputs.dir snippetsDir
}

// RESTDOCS
asciidoctor {
	dependsOn test
	configurations('asciidoctorExt')
	baseDirFollowsSourceFile()
	inputs.dir snippetsDir

}

asciidoctor.doFirst {
	delete 'src/main/resources/static/docs'
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/statis/docs")
}

// CODE ANALYSIS
sonarqube {
	properties {
		property("sonar.sourceEncoding", "UTF-8")
		property("sonar.projectKey", "S10P31A702")
		property("sonar.host.url", "https://sonarqube.ssafy.com")
		property("sonar.login", "b44c7b1716bb2d09854acdc70d608f7153ffefdc")
	}
}

jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	dependsOn test
	mustRunAfter test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Exception*',
							'**/global',
							'**/entity'
					])
				})
		)
	}
}

jacocoTestCoverageVerification {
	mustRunAfter jacocoTestReport

	violationRules {
		rule {
			enabled = true

			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
		}

		rule {
			element = 'METHOD'

			excludes = [
					"*"
			]

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}
		}
	}
}

tasks.register('testCoverage', Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn('test',
			'jacocoTestReport',
			'jacocoTestCoverageVerification')
}